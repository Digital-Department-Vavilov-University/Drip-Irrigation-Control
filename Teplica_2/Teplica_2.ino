#include "WiFi.h"
#include "WiFiClientSecure.h"
#include "UniversalTelegramBot.h"
#include "ArduinoJson.h"
#include <ThingSpeak.h>
#include <WebServer.h>
#include <EEPROM.h>

#define RELAY_WATER 25    // –ü–∏–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–∏–≤–æ–º
#define RELAY_HEAT 26     // –ü–∏–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–æ–≥—Ä–µ–≤–æ–º –ø–æ—á–≤—ã

bool relayWaterState = false;
bool relayHeatState = false;
bool autoWater = false;
bool autoHeat = false;

// –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
float tempMin = 15, tempMax = 25;    // –î–ª—è –ø–æ–ª–∏–≤–∞
float heatOnTemp = 10, heatOffTemp = 18; // –î–ª—è –æ–±–æ–≥—Ä–µ–≤–∞
float humMin = 30, humMax = 70;

#define EEPROM_SIZE 512
#define SSID_ADDR 0
#define PASS_ADDR 32

const char* DEFAULT_SSID = "****";
const char* DEFAULT_PASS = "****";

const char* BOTtoken = "***";
const char* CHAT_ID = "***";

const char* thingspeakApiKey = "***";
unsigned long thingspeakChannelID = ****;
WiFiClient thingspeakClient;

WebServer configServer(80);
const char* AP_SSID = "Teplica_Controller";
bool configMode = false;

WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);

const int botRequestDelay = 1000;
const long sensorUpdateInterval = 60000; // 1 –º–∏–Ω—É—Ç–∞
unsigned long lastTimeBotRan = 0;
unsigned long lastSensorUpdate = 0;

// –ü–∏–Ω—ã –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ –ø–æ—á–≤—ã
#define TEMP_PIN 34
#define HUM_PIN 35
const float TEMP_COEFF = 0.1;
const float HUM_COEFF = 0.2;

const char* configForm = R"rawliteral(
<!DOCTYPE HTML>
<html>
<head>
  <title>WiFi Configuration</title>
  <meta charset="utf-8">
  <style>
    body { font-family: Arial; text-align: center; margin-top: 50px; }
    input { margin: 10px; padding: 5px; }
  </style>
</head>
<body>
  <h1>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Wi-Fi</h1>
  <form action="/save" method="POST">
    <input type="text" name="ssid" placeholder="SSID" required><br>
    <input type="password" name="pass" placeholder="Password" required><br>
    <input type="submit" value="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å">
  </form>
</body>
</html>
)rawliteral";

void saveCredentials(const String& ssid, const String& pass) {
  EEPROM.begin(EEPROM_SIZE);
  EEPROM.put(SSID_ADDR, ssid);
  EEPROM.put(PASS_ADDR, pass);
  EEPROM.commit();
  EEPROM.end();
}

void loadCredentials(String& ssid, String& pass) {
  EEPROM.begin(EEPROM_SIZE);
  EEPROM.get(SSID_ADDR, ssid);
  EEPROM.get(PASS_ADDR, pass);
  EEPROM.end();

  if (ssid.length() == 0 || pass.length() == 0) {
    ssid = DEFAULT_SSID;
    pass = DEFAULT_PASS;
  }
}

void handleRoot() {
  configServer.send(200, "text/html", configForm);
}

void handleSave() {
  String newSSID = configServer.arg("ssid");
  String newPass = configServer.arg("pass");

  if (newSSID.length() == 0 || newPass.length() == 0) {
    configServer.send(400, "text/plain", "Error: Empty fields!");
    return;
  }

  saveCredentials(newSSID, newPass);
  configServer.send(200, "text/plain", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è...");
  delay(2000);
  ESP.restart();
}

void setupWiFi() {
  String ssid, pass;
  loadCredentials(ssid, pass);

  WiFi.begin(ssid.c_str(), pass.c_str());
  Serial.print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi ");
  Serial.println(ssid);

  unsigned long startTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startTime < 60000) {
    delay(500);
    Serial.print(".");
  }

  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è! –ó–∞–ø—É—Å–∫ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞...");
    WiFi.mode(WIFI_AP);
    WiFi.softAP(AP_SSID);
    Serial.print("AP SSID: ");
    Serial.println(AP_SSID);
    Serial.print("IP –∞–¥—Ä–µ—Å: ");
    Serial.println(WiFi.softAPIP());

    configServer.on("/", handleRoot);
    configServer.on("/save", handleSave);
    configServer.begin();
    configMode = true;
  } else {
    Serial.println("\n–ü–æ–¥–∫–ª—é—á–µ–Ω–æ! IP: " + WiFi.localIP().toString());
    client.setCACert(TELEGRAM_CERTIFICATE_ROOT);
    ThingSpeak.begin(thingspeakClient);
    bot.sendMessage(CHAT_ID, "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ç–µ–ø–ª–∏—Ü—ã –∑–∞–ø—É—â–µ–Ω!", "");
  }
}

String getReadings() {
  int rawTemp = analogRead(TEMP_PIN);
  int rawHum = analogRead(HUM_PIN);
  
  float temperature = (rawTemp / 4095.0 * 3.3) / TEMP_COEFF;
  float humidity = (rawHum / 4095.0 * 3.3) / HUM_COEFF;

  return "üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ—á–≤—ã: " + String(temperature) + " ¬∞C\n" +
         "üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: " + String(humidity) + " %\n" +
         "üí¶ –ü–æ–ª–∏–≤: " + String(relayWaterState ? "–í–ö–õ" : "–í–´–ö–õ") + (autoWater ? " (–ê–í–¢–û)" : " (–†–£–ß–ù)") + "\n" +
         "üî• –û–±–æ–≥—Ä–µ–≤: " + String(relayHeatState ? "–í–ö–õ" : "–í–´–ö–õ") + (autoHeat ? " (–ê–í–¢–û)" : " (–†–£–ß–ù)");
}

void sendSensorData() {
  String readings = getReadings();
  bot.sendMessage(CHAT_ID, readings, "");
}

void sendToThingSpeak(float temperature, float humidity) {
  if (WiFi.status() != WL_CONNECTED) return;

  ThingSpeak.setField(1, temperature);
  ThingSpeak.setField(2, humidity);
  ThingSpeak.setField(3, relayWaterState);
  ThingSpeak.setField(4, relayHeatState);
  ThingSpeak.writeFields(thingspeakChannelID, thingspeakApiKey);
}

void handleNewMessages(int numNewMessages) {
  for (int i = 0; i < numNewMessages; i++) {
    String chat_id = bot.messages[i].chat_id;
    String text = bot.messages[i].text;
    String from_name = bot.messages[i].from_name;

    if (chat_id != CHAT_ID) {
      bot.sendMessage(chat_id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", "");
      continue;
    }

    if (text.startsWith("/start")) {
      String welcome = "–ü—Ä–∏–≤–µ—Ç, " + from_name + "!\n";
      welcome += "üå± –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ø–ª–∏—Ü–µ–π:\n";
      welcome += "/readings - –ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤\n";
      welcome += "/water_on /water_off - –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∏–≤–æ–º\n";
      welcome += "/heat_on /heat_off - –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–æ–≥—Ä–µ–≤–æ–º\n";
      welcome += "/set_temp min max - –ø–æ—Ä–æ–≥–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª–∏–≤–∞\n";
      welcome += "/set_hum min max - –ø–æ—Ä–æ–≥–∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª–∏–≤–∞\n";
      welcome += "/set_heat on off - –ø–æ—Ä–æ–≥–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è –æ–±–æ–≥—Ä–µ–≤–∞\n";
      welcome += "/auto_off - –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –∞–≤—Ç–æ—Ä–µ–∂–∏–º—ã\n";
      welcome += "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n";
      bot.sendMessage(chat_id, welcome, "");
    }
    else if (text == "/readings") {
      bot.sendMessage(chat_id, getReadings(), "");
    }
    else if (text == "/water_on") {
      autoWater = false;
      digitalWrite(RELAY_WATER, HIGH);
      relayWaterState = true;
      bot.sendMessage(chat_id, "üí¶ –ü–æ–ª–∏–≤ –≤–∫–ª—é—á—ë–Ω –≤—Ä—É—á–Ω—É—é", "");
    }
    else if (text == "/water_off") {
      autoWater = false;
      digitalWrite(RELAY_WATER, LOW);
      relayWaterState = false;
      bot.sendMessage(chat_id, "üí¶ –ü–æ–ª–∏–≤ –≤—ã–∫–ª—é—á–µ–Ω –≤—Ä—É—á–Ω—É—é", "");
    }
    else if (text == "/heat_on") {
      autoHeat = false;
      digitalWrite(RELAY_HEAT, HIGH);
      relayHeatState = true;
      bot.sendMessage(chat_id, "üî• –û–±–æ–≥—Ä–µ–≤ –≤–∫–ª—é—á—ë–Ω –≤—Ä—É—á–Ω—É—é", "");
    }
    else if (text == "/heat_off") {
      autoHeat = false;
      digitalWrite(RELAY_HEAT, LOW);
      relayHeatState = false;
      bot.sendMessage(chat_id, "üî• –û–±–æ–≥—Ä–µ–≤ –≤—ã–∫–ª—é—á–µ–Ω –≤—Ä—É—á–Ω—É—é", "");
    }
    else if (text == "/auto_off") {
      autoWater = false;
      autoHeat = false;
      bot.sendMessage(chat_id, "‚öôÔ∏è –í—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∂–∏–º—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã", "");
    }
    else if (text.startsWith("/set_temp ")) {
      int space1 = text.indexOf(' ');
      int space2 = text.indexOf(' ', space1 + 1);
      if (space1 > 0 && space2 > 0) {
        tempMin = text.substring(space1 + 1, space2).toFloat();
        tempMax = text.substring(space2 + 1).toFloat();
        autoWater = true;
        bot.sendMessage(chat_id, "üå° –ê–≤—Ç–æ—Ä–µ–∂–∏–º –ø–æ–ª–∏–≤–∞ –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ: " + String(tempMin) + " - " + String(tempMax) + " ¬∞C", "");
      }
    }
    else if (text.startsWith("/set_hum ")) {
      int space1 = text.indexOf(' ');
      int space2 = text.indexOf(' ', space1 + 1);
      if (space1 > 0 && space2 > 0) {
        humMin = text.substring(space1 + 1, space2).toFloat();
        humMax = text.substring(space2 + 1).toFloat();
        autoWater = true;
        bot.sendMessage(chat_id, "üíß –ê–≤—Ç–æ—Ä–µ–∂–∏–º –ø–æ–ª–∏–≤–∞ –ø–æ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏: " + String(humMin) + " - " + String(humMax) + " %", "");
      }
    }
    else if (text.startsWith("/set_heat ")) {
      int space1 = text.indexOf(' ');
      int space2 = text.indexOf(' ', space1 + 1);
      if (space1 > 0 && space2 > 0) {
        heatOnTemp = text.substring(space1 + 1, space2).toFloat();
        heatOffTemp = text.substring(space2 + 1).toFloat();
        autoHeat = true;
        bot.sendMessage(chat_id, "üî• –ê–≤—Ç–æ—Ä–µ–∂–∏–º –æ–±–æ–≥—Ä–µ–≤–∞: –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–∏ " + String(heatOnTemp) + "¬∞C, –≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏ " + String(heatOffTemp) + "¬∞C", "");
      }
    }
    else if (text == "/status") {
      bot.sendMessage(chat_id, getReadings(), "");
    }
  }
}

void setup() {
  Serial.begin(115200);
  EEPROM.begin(EEPROM_SIZE);

  pinMode(RELAY_WATER, OUTPUT);
  pinMode(RELAY_HEAT, OUTPUT);
  digitalWrite(RELAY_WATER, LOW);
  digitalWrite(RELAY_HEAT, LOW);

  pinMode(TEMP_PIN, INPUT);
  pinMode(HUM_PIN, INPUT);

  setupWiFi();
}

void loop() {
  if (configMode) {
    configServer.handleClient();
    return;
  }

  if (millis() - lastTimeBotRan > botRequestDelay) {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    while (numNewMessages) {
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    lastTimeBotRan = millis();
  }

  if (millis() - lastSensorUpdate > sensorUpdateInterval) {
    int rawTemp = analogRead(TEMP_PIN);
    int rawHum = analogRead(HUM_PIN);
    float temperature = (rawTemp / 4095.0 * 3.3) / TEMP_COEFF;
    float humidity = (rawHum / 4095.0 * 3.3) / HUM_COEFF;

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∏–≤–æ–º
    if (autoWater) {
      if ((temperature > tempMax || humidity > humMax) && !relayWaterState) {
        digitalWrite(RELAY_WATER, HIGH);
        relayWaterState = true;
        bot.sendMessage(CHAT_ID, "üí¶ –ê–≤—Ç–æ: –ü–æ–ª–∏–≤ –≤–∫–ª—é—á–µ–Ω (T=" + String(temperature) + "¬∞C, H=" + String(humidity) + "%)", "");
      } 
      else if ((temperature < tempMin && humidity < humMin) && relayWaterState) {
        digitalWrite(RELAY_WATER, LOW);
        relayWaterState = false;
        bot.sendMessage(CHAT_ID, "üí¶ –ê–≤—Ç–æ: –ü–æ–ª–∏–≤ –≤—ã–∫–ª—é—á–µ–Ω (T=" + String(temperature) + "¬∞C, H=" + String(humidity) + "%)", "");
      }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–æ–≥—Ä–µ–≤–æ–º
    if (autoHeat) {
      if (temperature < heatOnTemp && !relayHeatState) {
        digitalWrite(RELAY_HEAT, HIGH);
        relayHeatState = true;
        bot.sendMessage(CHAT_ID, "üî• –ê–≤—Ç–æ: –û–±–æ–≥—Ä–µ–≤ –≤–∫–ª—é—á–µ–Ω (T=" + String(temperature) + "¬∞C)", "");
      } 
      else if (temperature > heatOffTemp && relayHeatState) {
        digitalWrite(RELAY_HEAT, LOW);
        relayHeatState = false;
        bot.sendMessage(CHAT_ID, "üî• –ê–≤—Ç–æ: –û–±–æ–≥—Ä–µ–≤ –≤—ã–∫–ª—é—á–µ–Ω (T=" + String(temperature) + "¬∞C)", "");
      }
    }

    sendSensorData();
    sendToThingSpeak(temperature, humidity);
    lastSensorUpdate = millis();
  }
}